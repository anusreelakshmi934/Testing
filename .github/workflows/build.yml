name: PR notification
on:
  push : 
jobs:
  fetch_all_pull_request_shas:
    runs-on: ubuntu-latest
    outputs:
      pr_details: ${{ steps.extract.outputs.pr_details }}
    env:
      API_URL: https://api.github.com/repos/redhat-developer/lsp4ij/pulls
    steps:
      - name: Extract PR numbers and merge_commit_shas
        shell: bash
        id: extract
        run: |
          pr_infos=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "${{ env.API_URL }}")
          
          # Extract PR numbers and merge_commit_sha values, excluding draft pull requests
          pr_details=$(echo "$pr_infos" | jq -r '.[] | select(.draft == false) | {number: .number, sha: .merge_commit_sha}')

          # Print the PR number and corresponding merge commit sha
          echo "PR number and merge commit sha:"
          echo "$pr_details" | jq -r '. | "PR #\(.number): \(.sha)"'

          # Create a JSON array string of PR numbers and SHAs
          pr_details=$(echo "$pr_details" | jq -nc '[inputs | {number: .number, sha: .sha}]')
          echo "pr_details=$pr_details" >> $GITHUB_OUTPUT

      - name: Fetch Pull Requests
        id: fetch_prs
        run: |
          prs=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$API_URL")
          echo "$prs" > prs.json
  
      - name: Check for Merge Conflicts
        id: check_conflicts
        run: |
          jq -r '.[] | select(.mergeable == false) | "PR #\(.number) has merge conflicts."' prs.json > conflicts.txt
          if [ -s conflicts.txt ]; then
            cat conflicts.txt
            echo "::set-output name=has_conflicts::true"
          else
            echo "No merge conflicts found."
            echo "::set-output name=has_conflicts::false"
          fi
  
      - name: Display Warning
        if: steps.check_conflicts.outputs.has_conflicts == 'true'
        run: echo "Warning:One or more PRs have merge conflicts. Please resolve them."



