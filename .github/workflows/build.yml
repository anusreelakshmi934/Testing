name: PR notification
on:
  push:
jobs:
  fetch_all_pull_request_shas: 
    runs-on: ubuntu-latest
    outputs:
      pr_details: ${{ steps.extract.outputs.pr_details }}
      is_empty: ${{ steps.extract.outputs.is_empty }}
    env:
      API_URL: https://api.github.com/repos/redhat-developer/lsp4ij/pulls
    name: PR Details
    steps:
      - name: Extract PR numbers and merge_commit_shas 
        shell: bash
        id: extract
        run: |
          # Fetch PR details from the GitHub API
          pr_infos=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "${{ env.API_URL }}")
          
          # Extract PR numbers and merge_commit_sha values, excluding draft pull requests
          pr_details=$(echo "$pr_infos" | jq -r '.[] | select(.draft == false) | {number: .number, sha: .merge_commit_sha}')
          
          # Print the PR number and corresponding merge commit sha
          echo "PR number and merge commit sha:"
          echo "$pr_details" | jq -r '. | "PR #\(.number): \(.sha)"'
          
          # Check if any of the PRs contain merge conflicts
          echo "Checking mergeable state of PRs..."
          pr_urls=$(echo "$pr_details" | jq -r '.number | "'$API_URL'/" + tostring')
          for url in $pr_urls; do
            pr_detail=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$url")
            mergeable_state=$(echo "$pr_detail" | jq -r '.mergeable_state')
            if [ "$mergeable_state" == "dirty" ]; then
              pr_number=$(echo "$pr_detail" | jq -r '.number')
              echo "##[warning] PR #$pr_number has a merge conflict."
            fi
          done

         
          
          for url in $pr_urls; do
            echo "$url"
            merge=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$url")
            pr_details_array=$(echo "$merge" | jq -nc '[inputs | select(.draft == false) | {number: .number, sha: .merge_commit_sha}]')
            echo "pr_details=$pr_details_array" >> $GITHUB_OUTPUT
            echo "PR Details: $pr_details_array"
          done

          

          
          # Print PR details
          # echo "PR Details: $pr_details_array"
          
          # Check if pr_details_array is empty
          if [ $(echo "$pr_details_array" | jq length) -eq 0 ]; then
            echo "pr_details is empty"
            echo "is_empty=true" >> $GITHUB_OUTPUT
          else
            echo "pr_details is not empty"
            echo "is_empty=false" >> $GITHUB_OUTPUT
          fi

          # # Check if pr_details_array is empty
          # if [ $(echo "$pr_details_array" | jq length) -eq 0 ]; then
          #   echo "pr_details is empty"
          #   echo "is_empty=true" >> $GITHUB_OUTPUT
          # else
          #   echo "pr_details is not empty"
          #   echo "is_empty=false" >> $GITHUB_OUTPUT
          # fi


  # Run the LTI Tests against each open lsp4ij PRs
  call-build-workflow-for-each-merge-commit-sha:
    needs: fetch_all_pull_request_shas
    if: ${{ needs.fetch_all_pull_request_shas.outputs.is_empty == 'false' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        runtime: [ linux, mac, windows ]
        include:
          - runtime: linux
            os: ubuntu-latest
            reportName: linux-test-report
          - runtime: mac
            os: macOS-latest
            reportName: mac-test-report
          - runtime: windows
            os: windows-latest
            reportName: windows-test-report
        pr_details: ${{ fromJson(needs.fetch_all_pull_request_shas.outputs.pr_details) }}
    name: Run LTI tests for PR #${{ matrix.pr_details.number }}
    steps:
      - name: 'Checkout lsp4ij'
        uses: actions/checkout@v4.1.7
        with:
          repository: redhat-developer/lsp4ij
          path: lsp4ij
          ref: ${{ matrix.pr_details.sha }}
  
